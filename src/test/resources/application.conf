akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = debug
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    warn-about-java-serializer-usage = off

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal {
      plugin = "sql-journal"
      auto-start-journals = ["sql-journal"]
    }
    snapshot-store {
      plugin = "sql-snapshot-store"
      auto-start-snapshot-stores = ["sql-snapshot-store"]
    }
  }

  extensions = []

  test {
    # factor by which to scale timeouts during tests, e.g. to account for shared
    # build system load
    timefactor =  1.0

    # duration of EventFilter.intercept waits after the block is finished until
    # all required messages are received
    filter-leeway = 3s

    # duration to wait in expectMsg and friends outside of within() block
    # by default
    single-expect-default = 30s

    # The timeout that is added as an implicit by DefaultTimeout trait
    default-timeout = 5s
  }
}

sql-journal {
  class = "journal.SqlWriteJournal"
  plugin-dispatcher = "akka.actor.default-dispatcher"
}

sql-snapshot-store {
  class = "snapshot.SqlSnapshotStore"
  plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
}

slick {
  driver = "slick.driver.MySQLDriver$"
  queueSize = 10000
  connectionTimeout = 180000
  validationTimeout = 5000 // This property controls the maximum amount of time that a connection will be tested for aliveness. This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
  idleTimeout = 600000 // 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections are never removed from the pool. Default: 600000 (10 minutes)
  maxLifetime = 1800000 // 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired, only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
  leakDetectionThreshold = 0 // This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled. Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0

  initializationFailFast = false // This property controls whether the pool will "fail fast" if the pool cannot be seeded with initial connections successfully. If you want your application to start even when the database is down/unavailable, set this property to false. Default: true

  keepAliveConnection = on // ensures that the database does not get dropped while we are using it

  numThreads = 10 // 5 * number of cores - The number of threads determines how many things you can *run* in parallel on the database server
  maxConnections = 20 // 2 * numThreads + 1 (if running on an SSD) - the number of connections determines you many things you can *keep in memory* at the same time on the database server
  minConnections = 5
  db {
    url = "jdbc:mysql://localhost:3306/test_journal_db?user=root&password=root&autoReconnect=true&useSSL=false"
    driver = com.mysql.cj.jdbc.Driver
    maxThreads = 5
  }
}
